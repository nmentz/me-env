pkg_add certbot
certbot certonly -d example.com # this should make ssl work for every web page

the output of this command will tell you where fullchain.pem and privkey.pem are (usually it's under /etc/letsencrype/live/domain.name, or something similar)

also this is might help if you don't wanna touch the server... ever. the timing on this is pretty frequent and will probably just waste vps compute so maybe 
something closer to @monthly or even @annually, also crontab.guru is good
crontab -e
0 0 * * * /usr/local/bin/certbot renew --quiet && rcctl restart nginx

certbot should in theory set up your nginx configuration to look nearly identical to this. but it can be finicky on *bsd's so here's what it should look like.
also setting up a 301 for www.domain.com -> domain.com is an option that a lot of sites tend to do.
server {
    listen 443 ssl;
    server_name yourdomain.com;

    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384';

    root /var/www/yourdomain.com/html;
    index index.html;

    location / {
        try_files $uri $uri/ =404;
    }

    # Optional: Redirect HTTP to HTTPS
    location / {
        if ($scheme = http) {
            return 301 https://$host$request_uri;
        }
    }
}

# Optional: HTTP to HTTPS redirection
server {
    listen 80;
    server_name yourdomain.com;

    location / {
        return 301 https://$host$request_uri;
    }
}
